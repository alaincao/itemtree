{"version":3,"sources":["node_modules/browser-pack/_prelude.js","Views/common.ts","global.d.ts","global.ts"],"names":[],"mappings":"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","file":"site.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\r\nimport * as common from \"./common\";\r\n\r\nexport const debugMessages : boolean = false;  // NB: 'export' so that it can be easily changed from the browser's console\r\nexport var pageParameters : any;\r\n\r\nexport function init(p:{ pageParameters:any })\r\n{\r\n\tcommon.utils.log( 'INIT', { pageParameters:p.pageParameters} );\r\n\tpageParameters = p.pageParameters;\r\n}\r\n\r\nexport namespace utils\r\n{\r\n\texport function log(...optionalParams: any[]) : void\r\n\t{\r\n\t\tconsole.log.apply( console, arguments );\r\n\t}\r\n\r\n\texport function error(...optionalParams: any[]) : void\r\n\t{\r\n\t\tconsole.log.apply( console, arguments );\r\n\t}\r\n\r\n\t/** Function to simulate string-valued enums\r\n\t * Based on: https://basarat.gitbooks.io/typescript/docs/types/literal-types.html\r\n\t * Returns: { e:the enum , a:the array specified as parameter } */\r\n\texport function strEnum<T extends string>(a:Array<T>): { e:{[K in T]: K}, a:T[] }\r\n\t{\r\n\t\tconst e = a.reduce( (res, key)=>\r\n\t\t\t{\r\n\t\t\t\tres[key] = key;\r\n\t\t\t\treturn res;\r\n\t\t\t}, Object.create(null) );\r\n\t\treturn { e, a };\r\n\t}\r\n\r\n\texport function stringIsNullOrEmpty(str:string) : boolean\r\n\t{\r\n\t\tif( str == null )\r\n\t\t\treturn true;\r\n\t\tif( str == '' )\r\n\t\t\treturn true;\r\n\t\treturn false;\r\n\t}\r\n\texport function stringIsNullOrWhitespace(str:string) : boolean\r\n\t{\r\n\t\tif( str == null )\r\n\t\t\treturn true;\r\n\t\tif( str.trim() == '' )\r\n\t\t\treturn true;\r\n\t\treturn false;\r\n\t}\r\n\r\n\texport function htmlEncode(txt:string|string[]) : string\r\n\t{\r\n\t\t// TODO: Find a better way ?\r\n\t\tif( Array.isArray(txt) )\r\n\t\t\treturn $.map( <string[]>txt, v=>$(document.createElement('span')).text( v ).html() ).join( '<br/>' );\r\n\t\telse\r\n\t\t\treturn $(document.createElement('span')).text( txt ).html();\r\n\t}\r\n\r\n\texport function arrayContains<T>(a:T[], item:any) : boolean\r\n\t{\r\n\t\treturn ( a.indexOf( item ) >= 0 );\r\n\t}\r\n\r\n\texport function arrayUnique<T>(a:T[]) : T[]\r\n\t{\r\n\t\t//return a.filter( (v,i)=>( a.indexOf(v) === i ) );\r\n\t\treturn [ ... new Set(a) ];\r\n\t}\r\n\r\n\texport function arrayRemoveItem<T>(a:T[], item:T) : boolean\r\n\t{\r\n\t\tlet i = a.indexOf( item );\r\n\t\tif( i < 0 )\r\n\t\t\treturn false;\r\n\t\ta.splice( i, 1 );\r\n\t\treturn true;\r\n\t}\r\n\r\n\texport function arraySum<T>(a:T[], f:(e:T)=>number) : number\r\n\t{\r\n\t\tlet rc = 0;\r\n\t\ta.forEach( function(e)\r\n\t\t\t{\r\n\t\t\t\trc += f(e);\r\n\t\t\t} );\r\n\t\treturn rc;\r\n\t}\r\n\r\n\texport function arrayMoveItem<T>(p:{ list:T[], item:T, direction?:'up'|'down' }) : T[]\r\n\t{\r\n\t\t// NB: Does not yet work when n>1 ...\r\n\r\n\t\tlet n = 1;\r\n\t\tif( p.direction != null )\r\n\t\t\tn = (p.direction == 'up') ? -n : n;\r\n\t\tconst i = p.list.indexOf( p.item );  // Start position\r\n\t\tif( i < 0 )\r\n\t\t\tthrow { error:'Could not find item in list', item:p.item };\r\n\t\tlet j = i + n;  // End position\r\n\t\tif( j < 0 )\r\n\t\t\tj = 0;\r\n\t\telse if( j >= p.list.length )\r\n\t\t\tj = p.list.length - 1;\r\n\t\tif( i == j )\r\n\t\t\t// NOOP\r\n\t\t\treturn p.list;\r\n\r\n\t\t// Swap items here\r\n\t\tconst tmp = p.list[ i ];\r\n\t\tp.list[ i ] = p.list[ j ];\r\n\t\tp.list[ j ] = tmp;\r\n\r\n\t\treturn p.list;\r\n\t}\r\n\r\n\texport function ensureInteger(p:{\tobservable:KnockoutObservable<Number>,\r\n\t\t\t\t\t\t\t\t\t\tfallbackValue?:number,\r\n\t\t\t\t\t\t\t\t\t\tmustBePositive?:boolean,\r\n\t\t\t\t\t\t\t\t\t\tcanBeZero?:boolean }) : void\r\n\t{\r\n\t\tif( p.canBeZero == null )\r\n\t\t\tp.canBeZero = true;\r\n\t\tif( p.fallbackValue == null )\r\n\t\t{\r\n\t\t\tif( p.canBeZero )\r\n\t\t\t\tp.fallbackValue = 0;\r\n\t\t\telse\r\n\t\t\t\tp.fallbackValue = 1;\r\n\t\t}\r\n\r\n\t\tp.observable.subscribe( function(value:number)\r\n\t\t\t{\r\n\t\t\t\tvar newValue = parseInt( <any>value );\r\n\r\n\t\t\t\tif( isNaN(newValue) )\r\n\t\t\t\t\tnewValue = p.fallbackValue;\r\n\t\t\t\telse if( (!p.canBeZero) && (value == 0) )\r\n\t\t\t\t\tnewValue = p.fallbackValue;\r\n\t\t\t\telse if( (p.mustBePositive) && (value < 0) )\r\n\t\t\t\t\tnewValue = p.fallbackValue;\r\n\r\n\t\t\t\tif( value !== newValue )\r\n\t\t\t\t\t// Value must be changed\r\n\t\t\t\t\tp.observable( newValue );\r\n\t\t\t} );\r\n\t}\r\n\r\n\t/** Generates a GUID-like string (something that looks like one, but NOT a real one!!!)\r\n\t * cf. http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript */\r\n\texport function newGuid() : string\r\n\t{\r\n\t\tvar S4 = function() : string\r\n\t\t{\r\n\t\t\treturn (((1+Math.random())*0x10000)|0).toString(16).substring(1);\r\n\t\t};\r\n\t\treturn (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\r\n\t}\r\n} // namespace utils\r\n\r\nexport namespace html\r\n{\r\n\t/** Invoke jQuery.blockUI's '.block()' on the specified element but supports multiple invokation on the same element */\r\n\texport function block($e:JQuery) : JQuery\r\n\t{\r\n\t\t// Insert/increment a block counter as jQuery 'data()'\r\n\t\tvar blockCounter = ( $e.data('common_blockCounter')|0 ) + 1;\r\n\t\t$e.data( 'common_blockCounter', blockCounter );\r\n\r\n\t\tif( blockCounter == 1 )\r\n\t\t\t// This element is not blocked yet\r\n\t\t\t(<any>$e).block();  // TODO: ACA: jQuery.blockUI typings ...\r\n\r\n\t\treturn $e;\r\n\t}\r\n\r\n\t/** Invoke jQuery.blockUI's '.unblock()' on the specified element except if it has been block()ed more than once */\r\n\texport function unblock($e:JQuery) : JQuery\r\n\t{\r\n\t\t// Decrement the block counter in the jQuery 'data()'\r\n\t\tvar blockCounter = ( $e.data('common_blockCounter')|0 ) - 1;\r\n\t\t$e.data( 'common_blockCounter', blockCounter );\r\n\r\n\t\tif( blockCounter < 0 )\r\n\t\t{\r\n\t\t\t// There is a logic error somewhere...\r\n\t\t\tcommon.utils.error( 'INTERNAL ERROR: Unblock count > block count:', blockCounter );\r\n\r\n\t\t\t// Reset counter\r\n\t\t\tblockCounter = 0;\r\n\t\t\t$e.data( 'common_blockCounter', 0 );\r\n\t\t}\r\n\r\n\t\tif( blockCounter == 0 )\r\n\t\t\t// This element is no more blocked by anything else\r\n\t\t\t(<any>$e).unblock();  // TODO: ACA: jQuery.blockUI typings ...\r\n\r\n\t\treturn $e;\r\n\t}\r\n\r\n\texport function ensureVisible($e:JQuery) : void\r\n\t{\r\n\t\t// Scroll\r\n\t\tconst offset = $e.offset().top - ( 20 + $e.height() );\r\n\t\t$('html, body').animate({ scrollTop:offset });  // cf.: https://stackoverflow.com/questions/4884839/how-do-i-get-an-element-to-scroll-into-view-using-jquery?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa\r\n\r\n\t\t// Blink\r\n\t\t$e.effect( \"highlight\", {}, 2000 );  // cf.: https://stackoverflow.com/questions/5205445/jquery-blinking-highlight-effect-on-div?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa\r\n\t}\r\n} // namespace html\r\n\r\nexport namespace url\r\n{\r\n\tconst onChangedEvent = 'onUrlChanged';\r\n\tvar onChangedCallbacks = $({});\r\n\tvar onChangedCallbacksRegistered = false;\r\n\r\n\texport function redirect(url:string)\r\n\t{\r\n\t\twindow.location.href = url;\r\n\t}\r\n\r\n\t/** Parse a parameters string like 'foo=bar&hello=world' and return the a dictionary like {foo:'bar',hello:'world'} */\r\n\texport function parseParameters(searchString?:string) : {[key:string]:any}\r\n\t{\r\n\t\tif( searchString == null )\r\n\t\t\tsearchString = window.location.search.substring(1);\r\n\t\tif( searchString.length == 0 )\r\n\t\t\treturn {};\r\n\r\n\t\tvar tokens = searchString.split( '&' );\r\n\r\n\t\tvar dict = <{[key:string]:any}>{};\r\n\t\tfor( var i=0; i < tokens.length; ++i )\r\n\t\t{\r\n\t\t\tvar pairs = tokens[i].split( '=' );\r\n\t\t\tvar key = decodeURIComponent( pairs[0] );\r\n\t\t\tvar value = decodeURIComponent( pairs[1] );\r\n\r\n\t\t\t// Try parse JSON\r\n\t\t\ttry { value = JSON.parse(value); }\r\n\t\t\tcatch( ex ){/* Not JSON => Keep the string as-is*/}\r\n\r\n\t\t\tdict[ key ] = value;\r\n\t\t}\r\n\t\treturn dict;\r\n\t}\r\n\r\n\t/** Transform a dictionary like {foo:'bar',hello:'world'} to a parameters string like 'foo=bar&hello=world' */\r\n\texport function stringifyParameters(parms:{[key:string]:any}) : string\r\n\t{\r\n\t\tvar pairs = <string[]>[];\r\n\t\t$.each( parms, function(key:string,value)\r\n\t\t\t{\r\n\t\t\t\tkey = encodeURIComponent( key );\r\n\r\n\t\t\t\tif( (value == null) || (typeof(value) === 'string') || (typeof(value) === 'number') || (typeof(value) === 'boolean') )\r\n\t\t\t\t\t{/*Keep as-is*/}\r\n\t\t\t\telse\r\n\t\t\t\t\t// Convert to JSON\r\n\t\t\t\t\tvalue = JSON.stringify( value );\r\n\t\t\t\tvalue = encodeURIComponent( value );\r\n\r\n\t\t\t\tpairs.push( key+\"=\"+value );\r\n\t\t\t} );\r\n\t\treturn pairs.join( '&' );\r\n\t}\r\n\r\n\t/** Registers a callback to be invoked whenever the browser's URL changes (cf. 'pushHistory()') */\r\n\texport function onChanged(callback:()=>void) : void\r\n\t{\r\n\t\t// NB: The callback gets invoked ALSO when 'pushHistory()' is invoked\r\n\r\n\t\tif( onChangedCallbacksRegistered == false )\r\n\t\t{\r\n\t\t\t$(window).bind( 'popstate', function(evt)\r\n\t\t\t\t{\r\n\t\t\t\t\tonChangedCallbacks.trigger( onChangedEvent );\r\n\t\t\t\t} );\r\n\t\t\tonChangedCallbacksRegistered = true;\r\n\t\t}\r\n\r\n\t\tonChangedCallbacks.bind( onChangedEvent, callback );\r\n\t}\r\n\r\n\texport function createUrl(p:{ pathname?:string, parameters?:{[key:string]:any} }) : string\r\n\t{\r\n\t\tvar newPath = p.pathname;\r\n\t\tif( newPath == null )\r\n\t\t\tnewPath = window.location.pathname;\r\n\r\n\t\tif( p.parameters != null )\r\n\t\t{\r\n\t\t\tconst queryString = stringifyParameters( p.parameters );\r\n\t\t\tif( queryString.length > 0 )\r\n\t\t\t\tnewPath = newPath+'?'+queryString;\r\n\t\t}\r\n\t\treturn newPath;\r\n\t}\r\n\r\n\t/** Change the browser's current URL without triggering an HTTP request (NB: Will trigger any registered 'onChanged()' callbacks) */\r\n\texport function pushHistory(p:{ pathname?:string, parameters?:{[key:string]:any}, newTitle?:string }) : void\r\n\t{\r\n\t\tconst newPath = createUrl( p );\r\n\t\twindow.history.pushState( {}, p.newTitle, newPath );\r\n\r\n\t\t// Invoke any registered callbacks\r\n\t\tonChangedCallbacks.trigger( onChangedEvent );\r\n\t}\r\n\r\n\texport function postRequest<T>(url:string, request:{[key:string]:any}) : Promise<T>\r\n\t{\r\n\t\tif( debugMessages )\r\n\t\t\trequest.debug = true;\r\n\r\n\t\tlet requestStr = JSON.stringify( request );\r\n\t\treturn new Promise<T>( (resolve,reject)=>\r\n\t\t\t{\r\n\t\t\t\t$.ajax({\ttype\t\t: 'POST',\r\n\t\t\t\t\t\t\turl\t\t\t: url,\r\n\t\t\t\t\t\t\tcontentType\t: 'application/json',\r\n\t\t\t\t\t\t\tdata\t\t: requestStr,\r\n\t\t\t\t\t\t\tdataType\t: 'json',\r\n\t\t\t\t\t\t\tsuccess\t\t: (data,textStatus,jqXHR)=>resolve( data ),\r\n\t\t\t\t\t\t\terror\t\t: (jqXHR,textStatus,errorThrown)=>\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\treject( textStatus );\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t} );\r\n\t}\r\n\r\n\texport function downloadFile(url:string) : void\r\n\t{\r\n\t\t$(document.body).append( $(\"<iframe/>\").attr({\tsrc\t\t: url,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle\t: 'visibility:hidden;display:none' })\r\n\t\t\t\t\t\t\t\t);\r\n\t}\r\n\r\n} // namespace url\r\n","\r\nimport * as dummy from \"knockout\";\r\n\r\ndeclare global\r\n{\r\n\tvar abc : any;  // DUMMY\r\n}\r\n","\r\nimport * as common from './Views/common';\r\n\r\n///////\r\n\r\n// Global assignment of window.itemttt (will be available in each pages e.g. from the console):\r\nvar itemttt =\r\n{\r\n\tcommon: common,\r\n\tapi: {\r\n\t},\r\n}\r\ndeclare global\r\n{\r\n\tinterface Window { itemttt: typeof itemttt; }\r\n}\r\nwindow.itemttt = itemttt;\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJWaWV3cy9jb21tb24udHMiLCJnbG9iYWwuZC50cyIsImdsb2JhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUNDQSxtQ0FBbUM7QUFFdEIsUUFBQSxhQUFhLEdBQWEsS0FBSyxDQUFDLENBQUUsMkVBQTJFO0FBRzFILFNBQWdCLElBQUksQ0FBQyxDQUF3QjtJQUU1QyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBRSxNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUMsQ0FBQyxDQUFDLGNBQWMsRUFBQyxDQUFFLENBQUM7SUFDL0Qsc0JBQWMsR0FBRyxDQUFDLENBQUMsY0FBYyxDQUFDO0FBQ25DLENBQUM7QUFKRCxvQkFJQztBQUVELElBQWlCLEtBQUssQ0FzSnJCO0FBdEpELFdBQWlCLEtBQUs7SUFFckIsU0FBZ0IsR0FBRyxDQUFDLEdBQUcsY0FBcUI7UUFFM0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUUsT0FBTyxFQUFFLFNBQVMsQ0FBRSxDQUFDO0lBQ3pDLENBQUM7SUFIZSxTQUFHLE1BR2xCLENBQUE7SUFFRCxTQUFnQixLQUFLLENBQUMsR0FBRyxjQUFxQjtRQUU3QyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBRSxPQUFPLEVBQUUsU0FBUyxDQUFFLENBQUM7SUFDekMsQ0FBQztJQUhlLFdBQUssUUFHcEIsQ0FBQTtJQUVEOztzRUFFa0U7SUFDbEUsU0FBZ0IsT0FBTyxDQUFtQixDQUFVO1FBRW5ELE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFDLEVBQUU7WUFFOUIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNmLE9BQU8sR0FBRyxDQUFDO1FBQ1osQ0FBQyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUUsQ0FBQztRQUMxQixPQUFP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VUFBVSxFQUFDLFdBQVcsRUFBQyxFQUFFO29CQUVwQyxNQUFNLENBQUUsVUFBVSxDQUFFLENBQUM7Z0JBQ3RCLENBQUM7YUFDTCxDQUFDLENBQUM7UUFDTixDQUFDLENBQUUsQ0FBQztJQUNOLENBQUM7SUFwQmUsaUJBQVcsY0FvQjFCLENBQUE7SUFFRCxTQUFnQixZQUFZLENBQUMsR0FBVTtRQUV0QyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBRSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFJLEdBQUc7WUFDN0MsS0FBSyxFQUFHLGdDQUFnQyxFQUFFLENBQUMsQ0FDaEQsQ0FBQztJQUNULENBQUM7SUFMZSxrQkFBWSxlQUszQixDQUFBO0FBRUYsQ0FBQyxFQWhJZ0IsR0FBRyxHQUFILFdBQUcsS0FBSCxXQUFHLFFBZ0luQixDQUFDLGdCQUFnQjs7O0FDdlZsQjs7O0FDQ0EseUNBQXlDO0FBRXpDLE9BQU87QUFFUCwrRkFBK0Y7QUFDL0YsSUFBSSxPQUFPLEdBQ1g7SUFDQyxNQUFNLEVBQUUsTUFBTTtJQUNkLEdBQUcsRUFBRSxFQUNKO0NBQ0QsQ0FBQTtBQUtELE1BQU0sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiXHJcbmltcG9ydCAqIGFzIGNvbW1vbiBmcm9tIFwiLi9jb21tb25cIjtcclxuXHJcbmV4cG9ydCBjb25zdCBkZWJ1Z01lc3NhZ2VzIDogYm9vbGVhbiA9IGZhbHNlOyAgLy8gTkI6ICdleHBvcnQnIHNvIHRoYXQgaXQgY2FuIGJlIGVhc2lseSBjaGFuZ2VkIGZyb20gdGhlIGJyb3dzZXIncyBjb25zb2xlXHJcbmV4cG9ydCB2YXIgcGFnZVBhcmFtZXRlcnMgOiBhbnk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5pdChwOnsgcGFnZVBhcmFtZXRlcnM6YW55IH0pXHJcbntcclxuXHRjb21tb24udXRpbHMubG9nKCAnSU5JVCcsIHsgcGFnZVBhcmFtZXRlcnM6cC5wYWdlUGFyYW1ldGVyc30gKTtcclxuXHRwYWdlUGFyYW1ldGVycyA9IHAucGFnZVBhcmFtZXRlcnM7XHJcbn1cclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgdXRpbHNcclxue1xyXG5cdGV4cG9ydCBmdW5jdGlvbiBsb2coLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKSA6IHZvaWRcclxuXHR7XHJcblx0XHRjb25zb2xlLmxvZy5hcHBseSggY29uc29sZSwgYXJndW1lbnRzICk7XHJcblx0fVxyXG5cclxuXHRleHBvcnQgZnVuY3Rpb24gZXJyb3IoLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKSA6IHZvaWRcclxuXHR7XHJcblx0XHRjb25zb2xlLmxvZy5hcHBseSggY29uc29sZSwgYXJndW1lbnRzICk7XHJcblx0fVxyXG5cclxuXHQvKiogRnVuY3Rpb24gdG8gc2ltdWxhdGUgc3RyaW5nLXZhbHVlZCBlbnVtc1xyXG5cdCAqIEJhc2VkIG9uOiBodHRwczovL2Jhc2FyYXQuZ2l0Ym9va3MuaW8vdHlwZXNjcmlwdC9kb2NzL3R5cGVzL2xpdGVyYWwtdHlwZXMuaHRtbFxyXG5cdCAqIFJldHVybnM6IHsgZTp0aGUgZW51bSAsIGE6dGhlIGFycmF5IHNwZWNpZmllZCBhcyBwYXJhbWV0ZXIgfSAqL1xyXG5cdGV4cG9ydCBmdW5jdGlvbiBzdHJFbnVtPFQgZXh0ZW5kcyBzdHJpbmc+KGE6QXJyYXk8VD4pOiB7IGU6e1tLIGluIFRdOiBLfSwgYTpUW10gfVxyXG5cdHtcclxuXHRcdGNvbnN0IGUgPSBhLnJlZHVjZSggKHJlcywga2V5KT0+XHJcblx0XHRcdHtcclxuXHRcdFx0XHRyZXNba2V5XSA9IGtleTtcclxuXHRcdFx0XHRyZXR1cm4gcmVzO1xyXG5cdFx0XHR9LCBPYmplY3QuY3JlYXRlKG51bGwpICk7XHJcblx0XHRyZXR1cm4geyBlLCBhIH07XHJcblx0fVxyXG5cclxuXHRleHBvcnQgZnVuY3Rpb24gc3RyaW5nSXNOdWxsT3JFbXB0eShzdHI6c3RyaW5nKSA6IGJvb2xlYW5cclxuXHR7XHJcblx0XHRpZiggc3RyID09IG51bGwgKVxyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdGlmKCBzdHIgPT0gJycgKVxyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcblx0ZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ0lzTnVsbE9yV2hpdGVzcGFjZShzdHI6c3RyaW5nKSA6IGJvb2xlYW5cclxuXHR7XHJcblx0XHRpZiggc3RyID09IG51bGwgKVxyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdGlmKCBzdHIudHJpbSgpID09ICcnIClcclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fVxyXG5cclxuXHRleHBvcnQgZnVuY3Rpb24gaHRtbEVuY29kZSh0eHQ6c3RyaW5nfHN0cmluZ1tdKSA6IHN0cmluZ1xyXG5cdHtcclxuXHRcdC8vIFRPRE86IEZpbmQgYSBiZXR0ZXIgd2F5ID9cclxuXHRcdGlmKCBBcnJheS5pc0FycmF5KHR4dCkgKVxyXG5cdFx0XHRyZXR1cm4gJC5tYXAoIDxzdHJpbmdbXT50eHQsIHY9PiQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpKS50ZXh0KCB2ICkuaHRtbCgpICkuam9pbiggJzxici8+JyApO1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHRyZXR1cm4gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJykpLnRleHQoIHR4dCApLmh0bWwoKTtcclxuXHR9XHJcblxyXG5cdGV4cG9ydCBmdW5jdGlvbiBhcnJheUNvbnRhaW5zPFQ+KGE6VFtdLCBpdGVtOmFueSkgOiBib29sZWFuXHJcblx0e1xyXG5cdFx0cmV0dXJuICggYS5pbmRleE9mKCBpdGVtICkgPj0gMCApO1xyXG5cdH1cclxuXHJcblx0ZXhwb3J0IGZ1bmN0aW9uIGFycmF5VW5pcXVlPFQ+KGE6VFtdKSA6IFRbXVxyXG5cdHtcclxuXHRcdC8vcmV0dXJuIGEuZmlsdGVyKCAodixpKT0+KCBhLmluZGV4T2YodikgPT09IGkgKSApO1xyXG5cdFx0cmV0dXJuIFsgLi4uIG5ldyBTZXQoYSkgXTtcclxuXHR9XHJcblxyXG5cdGV4cG9ydCBmdW5jdGlvbiBhcnJheVJlbW92ZUl0ZW08VD4oYTpUW10sIGl0ZW06VCkgOiBib29sZWFuXHJcblx0e1xyXG5cdFx0bGV0IGkgPSBhLmluZGV4T2YoIGl0ZW0gKTtcclxuXHRcdGlmKCBpIDwgMCApXHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdGEuc3BsaWNlKCBpLCAxICk7XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcblxyXG5cdGV4cG9ydCBmdW5jdGlvbiBhcnJheVN1bTxUPihhOlRbXSwgZjooZTpUKT0+bnVtYmVyKSA6IG51bWJlclxyXG5cdHtcclxuXHRcdGxldCByYyA9IDA7XHJcblx0XHRhLmZvckVhY2goIGZ1bmN0aW9uKGUpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRyYyArPSBmKGUpO1xyXG5cdFx0XHR9ICk7XHJcblx0XHRyZXR1cm4gcmM7XHJcblx0fVxyXG5cclxuXHRleHBvcnQgZnVuY3Rpb24gYXJyYXlNb3ZlSXRlbTxUPihwOnsgbGlzdDpUW10sIGl0ZW06VCwgZGlyZWN0aW9uPzondXAnfCdkb3duJyB9KSA6IFRbXVxyXG5cdHtcclxuXHRcdC8vIE5COiBEb2VzIG5vdCB5ZXQgd29yayB3aGVuIG4+MSAuLi5cclxuXHJcblx0XHRsZXQgbiA9IDE7XHJcblx0XHRpZiggcC5kaXJlY3Rpb24gIT0gbnVsbCApXHJcblx0XHRcdG4gPSAocC5kaXJlY3Rpb24gPT0gJ3VwJykgPyAtbiA6IG47XHJcblx0XHRjb25zdCBpID0gcC5saXN0LmluZGV4T2YoIHAuaXRlbSApOyAgLy8gU3RhcnQgcG9zaXRpb25cclxuXHRcdGlmKCBpIDwgMCApXHJcblx0XHRcdHRocm93IHsgZXJyb3I6J0NvdWxkIG5vdCBmaW5kIGl0ZW0gaW4gbGlzdCcsIGl0ZW06cC5pdGVtIH07XHJcblx0XHRsZXQgaiA9IGkgKyBuOyAgLy8gRW5kIHBvc2l0aW9uXHJcblx0XHRpZiggaiA8IDAgKVxyXG5cdFx0XHRqID0gMDtcclxuXHRcdGVsc2UgaWYoIGogPj0gcC5saXN0Lmxlbmd0aCApXHJcblx0XHRcdGogPSBwLmxpc3QubGVuZ3RoIC0gMTtcclxuXHRcdGlmKCBpID09IGogKVxyXG5cdFx0XHQvLyBOT09QXHJcblx0XHRcdHJldHVybiBwLmxpc3Q7XHJcblxyXG5cdFx0Ly8gU3dhcCBpdGVtcyBoZXJlXHJcblx0XHRjb25zdCB0bXAgPSBwLmxpc3RbIGkgXTtcclxuXHRcdHAubGlzdFsgaSBdID0gcC5saXN0WyBqIF07XHJcblx0XHRwLmxpc3RbIGogXSA9IHRtcDtcclxuXHJcblx0XHRyZXR1cm4gcC5saXN0O1xyXG5cdH1cclxuXHJcblx0ZXhwb3J0IGZ1bmN0aW9uIGVuc3VyZUludGVnZXIocDp7XHRvYnNlcnZhYmxlOktub2Nrb3V0T2JzZXJ2YWJsZTxOdW1iZXI+LFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZhbGxiYWNrVmFsdWU/Om51bWJlcixcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRtdXN0QmVQb3NpdGl2ZT86Ym9vbGVhbixcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjYW5CZVplcm8/OmJvb2xlYW4gfSkgOiB2b2lkXHJcblx0e1xyXG5cdFx0aWYoIHAuY2FuQmVaZXJvID09IG51bGwgKVxyXG5cdFx0XHRwLmNhbkJlWmVybyA9IHRydWU7XHJcblx0XHRpZiggcC5mYWxsYmFja1ZhbHVlID09IG51bGwgKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggcC5jYW5CZVplcm8gKVxyXG5cdFx0XHRcdHAuZmFsbGJhY2tWYWx1ZSA9IDA7XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRwLmZhbGxiYWNrVmFsdWUgPSAxO1xyXG5cdFx0fVxyXG5cclxuXHRcdHAub2JzZXJ2YWJsZS5zdWJzY3JpYmUoIGZ1bmN0aW9uKHZhbHVlOm51bWJlcilcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHZhciBuZXdWYWx1ZSA9IHBhcnNlSW50KCA8YW55PnZhbHVlICk7XHJcblxyXG5cdFx0XHRcdGlmKCBpc05hTihuZXdWYWx1ZSkgKVxyXG5cdFx0XHRcdFx0bmV3VmFsdWUgPSBwLmZhbGxiYWNrVmFsdWU7XHJcblx0XHRcdFx0ZWxzZSBpZiggKCFwLmNhbkJlWmVybykgJiYgKHZhbHVlID09IDApIClcclxuXHRcdFx0XHRcdG5ld1ZhbHVlID0gcC5mYWxsYmFja1ZhbHVlO1xyXG5cdFx0XHRcdGVsc2UgaWYoIChwLm11c3RCZVBvc2l0aXZlKSAmJiAodmFsdWUgPCAwKSApXHJcblx0XHRcdFx0XHRuZXdWYWx1ZSA9IHAuZmFsbGJhY2tWYWx1ZTtcclxuXHJcblx0XHRcdFx0aWYoIHZhbHVlICE9PSBuZXdWYWx1ZSApXHJcblx0XHRcdFx0XHQvLyBWYWx1ZSBtdXN0IGJlIGNoYW5nZWRcclxuXHRcdFx0XHRcdHAub2JzZXJ2YWJsZSggbmV3VmFsdWUgKTtcclxuXHRcdFx0fSApO1xyXG5cdH1cclxuXHJcblx0LyoqIEdlbmVyYXRlcyBhIEdVSUQtbGlrZSBzdHJpbmcgKHNvbWV0aGluZyB0aGF0IGxvb2tzIGxpa2Ugb25lLCBidXQgTk9UIGEgcmVhbCBvbmUhISEpXHJcblx0ICogY2YuIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTA1MDM0L2hvdy10by1jcmVhdGUtYS1ndWlkLXV1aWQtaW4tamF2YXNjcmlwdCAqL1xyXG5cdGV4cG9ydCBmdW5jdGlvbiBuZXdHdWlkKCkgOiBzdHJpbmdcclxuXHR7XHJcblx0XHR2YXIgUzQgPSBmdW5jdGlvbigpIDogc3RyaW5nXHJcblx0XHR7XHJcblx0XHRcdHJldHVybiAoKCgxK01hdGgucmFuZG9tKCkpKjB4MTAwMDApfDApLnRvU3RyaW5nKDE2KS5zdWJzdHJpbmcoMSk7XHJcblx0XHR9O1xyXG5cdFx0cmV0dXJuIChTNCgpK1M0KCkrXCItXCIrUzQoKStcIi1cIitTNCgpK1wiLVwiK1M0KCkrXCItXCIrUzQoKStTNCgpK1M0KCkpO1xyXG5cdH1cclxufSAvLyBuYW1lc3BhY2UgdXRpbHNcclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgaHRtbFxyXG57XHJcblx0LyoqIEludm9rZSBqUXVlcnkuYmxvY2tVSSdzICcuYmxvY2soKScgb24gdGhlIHNwZWNpZmllZCBlbGVtZW50IGJ1dCBzdXBwb3J0cyBtdWx0aXBsZSBpbnZva2F0aW9uIG9uIHRoZSBzYW1lIGVsZW1lbnQgKi9cclxuXHRleHBvcnQgZnVuY3Rpb24gYmxvY2soJGU6SlF1ZXJ5KSA6IEpRdWVyeVxyXG5cdHtcclxuXHRcdC8vIEluc2VydC9pbmNyZW1lbnQgYSBibG9jayBjb3VudGVyIGFzIGpRdWVyeSAnZGF0YSgpJ1xyXG5cdFx0dmFyIGJsb2NrQ291bnRlciA9ICggJGUuZGF0YSgnY29tbW9uX2Jsb2NrQ291bnRlcicpfDAgKSArIDE7XHJcblx0XHQkZS5kYXRhKCAnY29tbW9uX2Jsb2NrQ291bnRlcicsIGJsb2NrQ291bnRlciApO1xyXG5cclxuXHRcdGlmKCBibG9ja0NvdW50ZXIgPT0gMSApXHJcblx0XHRcdC8vIFRoaXMgZWxlbWVudCBpcyBub3QgYmxvY2tlZCB5ZXRcclxuXHRcdFx0KDxhbnk+JGUpLmJsb2NrKCk7ICAvLyBUT0RPOiBBQ0E6IGpRdWVyeS5ibG9ja1VJIHR5cGluZ3MgLi4uXHJcblxyXG5cdFx0cmV0dXJuICRlO1xyXG5cdH1cclxuXHJcblx0LyoqIEludm9rZSBqUXVlcnkuYmxvY2tVSSdzICcudW5ibG9jaygpJyBvbiB0aGUgc3BlY2lmaWVkIGVsZW1lbnQgZXhjZXB0IGlmIGl0IGhhcyBiZWVuIGJsb2NrKCllZCBtb3JlIHRoYW4gb25jZSAqL1xyXG5cdGV4cG9ydCBmdW5jdGlvbiB1bmJsb2NrKCRlOkpRdWVyeSkgOiBKUXVlcnlcclxuXHR7XHJcblx0XHQvLyBEZWNyZW1lbnQgdGhlIGJsb2NrIGNvdW50ZXIgaW4gdGhlIGpRdWVyeSAnZGF0YSgpJ1xyXG5cdFx0dmFyIGJsb2NrQ291bnRlciA9ICggJGUuZGF0YSgnY29tbW9uX2Jsb2NrQ291bnRlcicpfDAgKSAtIDE7XHJcblx0XHQkZS5kYXRhKCAnY29tbW9uX2Jsb2NrQ291bnRlcicsIGJsb2NrQ291bnRlciApO1xyXG5cclxuXHRcdGlmKCBibG9ja0NvdW50ZXIgPCAwIClcclxuXHRcdHtcclxuXHRcdFx0Ly8gVGhlcmUgaXMgYSBsb2dpYyBlcnJvciBzb21ld2hlcmUuLi5cclxuXHRcdFx0Y29tbW9uLnV0aWxzLmVycm9yKCAnSU5URVJOQUwgRVJST1I6IFVuYmxvY2sgY291bnQgPiBibG9jayBjb3VudDonLCBibG9ja0NvdW50ZXIgKTtcclxuXHJcblx0XHRcdC8vIFJlc2V0IGNvdW50ZXJcclxuXHRcdFx0YmxvY2tDb3VudGVyID0gMDtcclxuXHRcdFx0JGUuZGF0YSggJ2NvbW1vbl9ibG9ja0NvdW50ZXInLCAwICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYoIGJsb2NrQ291bnRlciA9PSAwIClcclxuXHRcdFx0Ly8gVGhpcyBlbGVtZW50IGlzIG5vIG1vcmUgYmxvY2tlZCBieSBhbnl0aGluZyBlbHNlXHJcblx0XHRcdCg8YW55PiRlKS51bmJsb2NrKCk7ICAvLyBUT0RPOiBBQ0E6IGpRdWVyeS5ibG9ja1VJIHR5cGluZ3MgLi4uXHJcblxyXG5cdFx0cmV0dXJuICRlO1xyXG5cdH1cclxuXHJcblx0ZXhwb3J0IGZ1bmN0aW9uIGVuc3VyZVZpc2libGUoJGU6SlF1ZXJ5KSA6IHZvaWRcclxuXHR7XHJcblx0XHQvLyBTY3JvbGxcclxuXHRcdGNvbnN0IG9mZnNldCA9ICRlLm9mZnNldCgpLnRvcCAtICggMjAgKyAkZS5oZWlnaHQoKSApO1xyXG5cdFx0JCgnaHRtbCwgYm9keScpLmFuaW1hdGUoeyBzY3JvbGxUb3A6b2Zmc2V0IH0pOyAgLy8gY2YuOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80ODg0ODM5L2hvdy1kby1pLWdldC1hbi1lbGVtZW50LXRvLXNjcm9sbC1pbnRvLXZpZXctdXNpbmctanF1ZXJ5P3V0bV9tZWRpdW09b3JnYW5pYyZ1dG1fc291cmNlPWdvb2dsZV9yaWNoX3FhJnV0bV9jYW1wYWlnbj1nb29nbGVfcmljaF9xYVxyXG5cclxuXHRcdC8vIEJsaW5rXHJcblx0XHQkZS5lZmZlY3QoIFwiaGlnaGxpZ2h0XCIsIHt9LCAyMDAwICk7ICAvLyBjZi46IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzUyMDU0NDUvanF1ZXJ5LWJsaW5raW5nLWhpZ2hsaWdodC1lZmZlY3Qtb24tZGl2P3V0bV9tZWRpdW09b3JnYW5pYyZ1dG1fc291cmNlPWdvb2dsZV9yaWNoX3FhJnV0bV9jYW1wYWlnbj1nb29nbGVfcmljaF9xYVxyXG5cdH1cclxufSAvLyBuYW1lc3BhY2UgaHRtbFxyXG5cclxuZXhwb3J0IG5hbWVzcGFjZSB1cmxcclxue1xyXG5cdGNvbnN0IG9uQ2hhbmdlZEV2ZW50ID0gJ29uVXJsQ2hhbmdlZCc7XHJcblx0dmFyIG9uQ2hhbmdlZENhbGxiYWNrcyA9ICQoe30pO1xyXG5cdHZhciBvbkNoYW5nZWRDYWxsYmFja3NSZWdpc3RlcmVkID0gZmFsc2U7XHJcblxyXG5cdGV4cG9ydCBmdW5jdGlvbiByZWRpcmVjdCh1cmw6c3RyaW5nKVxyXG5cdHtcclxuXHRcdHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdXJsO1xyXG5cdH1cclxuXHJcblx0LyoqIFBhcnNlIGEgcGFyYW1ldGVycyBzdHJpbmcgbGlrZSAnZm9vPWJhciZoZWxsbz13b3JsZCcgYW5kIHJldHVybiB0aGUgYSBkaWN0aW9uYXJ5IGxpa2Uge2ZvbzonYmFyJyxoZWxsbzond29ybGQnfSAqL1xyXG5cdGV4cG9ydCBmdW5jdGlvbiBwYXJzZVBhcmFtZXRlcnMoc2VhcmNoU3RyaW5nPzpzdHJpbmcpIDoge1trZXk6c3RyaW5nXTphbnl9XHJcblx0e1xyXG5cdFx0aWYoIHNlYXJjaFN0cmluZyA9PSBudWxsIClcclxuXHRcdFx0c2VhcmNoU3RyaW5nID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaC5zdWJzdHJpbmcoMSk7XHJcblx0XHRpZiggc2VhcmNoU3RyaW5nLmxlbmd0aCA9PSAwIClcclxuXHRcdFx0cmV0dXJuIHt9O1xyXG5cclxuXHRcdHZhciB0b2tlbnMgPSBzZWFyY2hTdHJpbmcuc3BsaXQoICcmJyApO1xyXG5cclxuXHRcdHZhciBkaWN0ID0gPHtba2V5OnN0cmluZ106YW55fT57fTtcclxuXHRcdGZvciggdmFyIGk9MDsgaSA8IHRva2Vucy5sZW5ndGg7ICsraSApXHJcblx0XHR7XHJcblx0XHRcdHZhciBwYWlycyA9IHRva2Vuc1tpXS5zcGxpdCggJz0nICk7XHJcblx0XHRcdHZhciBrZXkgPSBkZWNvZGVVUklDb21wb25lbnQoIHBhaXJzWzBdICk7XHJcblx0XHRcdHZhciB2YWx1ZSA9IGRlY29kZVVSSUNvbXBvbmVudCggcGFpcnNbMV0gKTtcclxuXHJcblx0XHRcdC8vIFRyeSBwYXJzZSBKU09OXHJcblx0XHRcdHRyeSB7IHZhbHVlID0gSlNPTi5wYXJzZSh2YWx1ZSk7IH1cclxuXHRcdFx0Y2F0Y2goIGV4ICl7LyogTm90IEpTT04gPT4gS2VlcCB0aGUgc3RyaW5nIGFzLWlzKi99XHJcblxyXG5cdFx0XHRkaWN0WyBrZXkgXSA9IHZhbHVlO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGRpY3Q7XHJcblx0fVxyXG5cclxuXHQvKiogVHJhbnNmb3JtIGEgZGljdGlvbmFyeSBsaWtlIHtmb286J2JhcicsaGVsbG86J3dvcmxkJ30gdG8gYSBwYXJhbWV0ZXJzIHN0cmluZyBsaWtlICdmb289YmFyJmhlbGxvPXdvcmxkJyAqL1xyXG5cdGV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnlQYXJhbWV0ZXJzKHBhcm1zOntba2V5OnN0cmluZ106YW55fSkgOiBzdHJpbmdcclxuXHR7XHJcblx0XHR2YXIgcGFpcnMgPSA8c3RyaW5nW10+W107XHJcblx0XHQkLmVhY2goIHBhcm1zLCBmdW5jdGlvbihrZXk6c3RyaW5nLHZhbHVlKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0a2V5ID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKTtcclxuXHJcblx0XHRcdFx0aWYoICh2YWx1ZSA9PSBudWxsKSB8fCAodHlwZW9mKHZhbHVlKSA9PT0gJ3N0cmluZycpIHx8ICh0eXBlb2YodmFsdWUpID09PSAnbnVtYmVyJykgfHwgKHR5cGVvZih2YWx1ZSkgPT09ICdib29sZWFuJykgKVxyXG5cdFx0XHRcdFx0ey8qS2VlcCBhcy1pcyovfVxyXG5cdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdC8vIENvbnZlcnQgdG8gSlNPTlxyXG5cdFx0XHRcdFx0dmFsdWUgPSBKU09OLnN0cmluZ2lmeSggdmFsdWUgKTtcclxuXHRcdFx0XHR2YWx1ZSA9IGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgKTtcclxuXHJcblx0XHRcdFx0cGFpcnMucHVzaCgga2V5K1wiPVwiK3ZhbHVlICk7XHJcblx0XHRcdH0gKTtcclxuXHRcdHJldHVybiBwYWlycy5qb2luKCAnJicgKTtcclxuXHR9XHJcblxyXG5cdC8qKiBSZWdpc3RlcnMgYSBjYWxsYmFjayB0byBiZSBpbnZva2VkIHdoZW5ldmVyIHRoZSBicm93c2VyJ3MgVVJMIGNoYW5nZXMgKGNmLiAncHVzaEhpc3RvcnkoKScpICovXHJcblx0ZXhwb3J0IGZ1bmN0aW9uIG9uQ2hhbmdlZChjYWxsYmFjazooKT0+dm9pZCkgOiB2b2lkXHJcblx0e1xyXG5cdFx0Ly8gTkI6IFRoZSBjYWxsYmFjayBnZXRzIGludm9rZWQgQUxTTyB3aGVuICdwdXNoSGlzdG9yeSgpJyBpcyBpbnZva2VkXHJcblxyXG5cdFx0aWYoIG9uQ2hhbmdlZENhbGxiYWNrc1JlZ2lzdGVyZWQgPT0gZmFsc2UgKVxyXG5cdFx0e1xyXG5cdFx0XHQkKHdpbmRvdykuYmluZCggJ3BvcHN0YXRlJywgZnVuY3Rpb24oZXZ0KVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdG9uQ2hhbmdlZENhbGxiYWNrcy50cmlnZ2VyKCBvbkNoYW5nZWRFdmVudCApO1xyXG5cdFx0XHRcdH0gKTtcclxuXHRcdFx0b25DaGFuZ2VkQ2FsbGJhY2tzUmVnaXN0ZXJlZCA9IHRydWU7XHJcblx0XHR9XHJcblxyXG5cdFx0b25DaGFuZ2VkQ2FsbGJhY2tzLmJpbmQoIG9uQ2hhbmdlZEV2ZW50LCBjYWxsYmFjayApO1xyXG5cdH1cclxuXHJcblx0ZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVVybChwOnsgcGF0aG5hbWU/OnN0cmluZywgcGFyYW1ldGVycz86e1trZXk6c3RyaW5nXTphbnl9IH0pIDogc3RyaW5nXHJcblx0e1xyXG5cdFx0dmFyIG5ld1BhdGggPSBwLnBhdGhuYW1lO1xyXG5cdFx0aWYoIG5ld1BhdGggPT0gbnVsbCApXHJcblx0XHRcdG5ld1BhdGggPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWU7XHJcblxyXG5cdFx0aWYoIHAucGFyYW1ldGVycyAhPSBudWxsIClcclxuXHRcdHtcclxuXHRcdFx0Y29uc3QgcXVlcnlTdHJpbmcgPSBzdHJpbmdpZnlQYXJhbWV0ZXJzKCBwLnBhcmFtZXRlcnMgKTtcclxuXHRcdFx0aWYoIHF1ZXJ5U3RyaW5nLmxlbmd0aCA+IDAgKVxyXG5cdFx0XHRcdG5ld1BhdGggPSBuZXdQYXRoKyc/JytxdWVyeVN0cmluZztcclxuXHRcdH1cclxuXHRcdHJldHVybiBuZXdQYXRoO1xyXG5cdH1cclxuXHJcblx0LyoqIENoYW5nZSB0aGUgYnJvd3NlcidzIGN1cnJlbnQgVVJMIHdpdGhvdXQgdHJpZ2dlcmluZyBhbiBIVFRQIHJlcXVlc3QgKE5COiBXaWxsIHRyaWdnZXIgYW55IHJlZ2lzdGVyZWQgJ29uQ2hhbmdlZCgpJyBjYWxsYmFja3MpICovXHJcblx0ZXhwb3J0IGZ1bmN0aW9uIHB1c2hIaXN0b3J5KHA6eyBwYXRobmFtZT86c3RyaW5nLCBwYXJhbWV0ZXJzPzp7W2tleTpzdHJpbmddOmFueX0sIG5ld1RpdGxlPzpzdHJpbmcgfSkgOiB2b2lkXHJcblx0e1xyXG5cdFx0Y29uc3QgbmV3UGF0aCA9IGNyZWF0ZVVybCggcCApO1xyXG5cdFx0d2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKCB7fSwgcC5uZXdUaXRsZSwgbmV3UGF0aCApO1xyXG5cclxuXHRcdC8vIEludm9rZSBhbnkgcmVnaXN0ZXJlZCBjYWxsYmFja3NcclxuXHRcdG9uQ2hhbmdlZENhbGxiYWNrcy50cmlnZ2VyKCBvbkNoYW5nZWRFdmVudCApO1xyXG5cdH1cclxuXHJcblx0ZXhwb3J0IGZ1bmN0aW9uIHBvc3RSZXF1ZXN0PFQ+KHVybDpzdHJpbmcsIHJlcXVlc3Q6e1trZXk6c3RyaW5nXTphbnl9KSA6IFByb21pc2U8VD5cclxuXHR7XHJcblx0XHRpZiggZGVidWdNZXNzYWdlcyApXHJcblx0XHRcdHJlcXVlc3QuZGVidWcgPSB0cnVlO1xyXG5cclxuXHRcdGxldCByZXF1ZXN0U3RyID0gSlNPTi5zdHJpbmdpZnkoIHJlcXVlc3QgKTtcclxuXHRcdHJldHVybiBuZXcgUHJvbWlzZTxUPiggKHJlc29sdmUscmVqZWN0KT0+XHJcblx0XHRcdHtcclxuXHRcdFx0XHQkLmFqYXgoe1x0dHlwZVx0XHQ6ICdQT1NUJyxcclxuXHRcdFx0XHRcdFx0XHR1cmxcdFx0XHQ6IHVybCxcclxuXHRcdFx0XHRcdFx0XHRjb250ZW50VHlwZVx0OiAnYXBwbGljYXRpb24vanNvbicsXHJcblx0XHRcdFx0XHRcdFx0ZGF0YVx0XHQ6IHJlcXVlc3RTdHIsXHJcblx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVcdDogJ2pzb24nLFxyXG5cdFx0XHRcdFx0XHRcdHN1Y2Nlc3NcdFx0OiAoZGF0YSx0ZXh0U3RhdHVzLGpxWEhSKT0+cmVzb2x2ZSggZGF0YSApLFxyXG5cdFx0XHRcdFx0XHRcdGVycm9yXHRcdDogKGpxWEhSLHRleHRTdGF0dXMsZXJyb3JUaHJvd24pPT5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVqZWN0KCB0ZXh0U3RhdHVzICk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHR9ICk7XHJcblx0fVxyXG5cclxuXHRleHBvcnQgZnVuY3Rpb24gZG93bmxvYWRGaWxlKHVybDpzdHJpbmcpIDogdm9pZFxyXG5cdHtcclxuXHRcdCQoZG9jdW1lbnQuYm9keSkuYXBwZW5kKCAkKFwiPGlmcmFtZS8+XCIpLmF0dHIoe1x0c3JjXHRcdDogdXJsLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0c3R5bGVcdDogJ3Zpc2liaWxpdHk6aGlkZGVuO2Rpc3BsYXk6bm9uZScgfSlcclxuXHRcdFx0XHRcdFx0XHRcdCk7XHJcblx0fVxyXG5cclxufSAvLyBuYW1lc3BhY2UgdXJsXHJcbiIsIiIsIlxyXG5pbXBvcnQgKiBhcyBjb21tb24gZnJvbSAnLi9WaWV3cy9jb21tb24nO1xyXG5cclxuLy8vLy8vL1xyXG5cclxuLy8gR2xvYmFsIGFzc2lnbm1lbnQgb2Ygd2luZG93Lml0ZW10dHQgKHdpbGwgYmUgYXZhaWxhYmxlIGluIGVhY2ggcGFnZXMgZS5nLiBmcm9tIHRoZSBjb25zb2xlKTpcclxudmFyIGl0ZW10dHQgPVxyXG57XHJcblx0Y29tbW9uOiBjb21tb24sXHJcblx0YXBpOiB7XHJcblx0fSxcclxufVxyXG5kZWNsYXJlIGdsb2JhbFxyXG57XHJcblx0aW50ZXJmYWNlIFdpbmRvdyB7IGl0ZW10dHQ6IHR5cGVvZiBpdGVtdHR0OyB9XHJcbn1cclxud2luZG93Lml0ZW10dHQgPSBpdGVtdHR0O1xyXG4iXX0="}